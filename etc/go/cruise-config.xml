<?xml version="1.0" encoding="utf-8"?>
<cruise xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="cruise-config.xsd" schemaVersion="75">
  <server artifactsdir="artifacts" agentAutoRegisterKey="123456789abcdef" commandRepositoryLocation="default" serverId="a760d4bc-fb25-4f25-9485-25280d256574">
    <security>
      <passwordFile path="/var/go/password.properties" />
    </security>
  </server>
  <scms>
    <scm id="84124bda-6568-48ee-8407-1b55a82bdc7b" name="Gerrit_PR">
      <pluginConfiguration id="gerrit.cs" version="1" />
      <configuration>
        <property>
          <key>url</key>
          <value>http://121.42.193.129:8080/dummy-project</value>
        </property>
      </configuration>
    </scm>
    <scm id="59cfe71f-1dbd-4009-b479-fa18e2240443" name="leansw-cdmetrics">
      <pluginConfiguration id="github.pr" version="1" />
      <configuration>
        <property>
          <key>url</key>
          <value>git@github.com:twconsultants/leansw-cdmetrics.git</value>
        </property>
        <property>
          <key>username</key>
          <value>yunlzheng</value>
        </property>
        <property>
          <key>password</key>
          <encryptedValue>twZ+fYgHBrtFax1DXkF+XA==</encryptedValue>
        </property>
      </configuration>
    </scm>
    <scm id="e147ceb4-1ffc-4c02-8234-4c84cef5b11e" name="leansw-cdmetrics-pr">
      <pluginConfiguration id="github.pr" version="1" />
      <configuration>
        <property>
          <key>url</key>
          <value>https://github.com/twconsultants/leansw-cdmetrics.git</value>
        </property>
        <property>
          <key>username</key>
          <value>yunlzheng</value>
        </property>
        <property>
          <key>password</key>
          <encryptedValue>twZ+fYgHBrtFax1DXkF+XA==</encryptedValue>
        </property>
      </configuration>
    </scm>
  </scms>
  <pipelines group="CodeGating">
    <pipeline name="gerrit-project">
      <materials>
        <git url="http://owenyang@121.42.193.129:8080/dummy-project" dest="gerrit-dirctory" materialName="Gerrit" />
      </materials>
      <stage name="defaultStage">
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>echo $SHELL $GO_PIPELINE_LABEL</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="gerrit-project-PR">
      <environmentvariables>
        <variable name="go.plugin.build.status.gerrit.username">
          <value>owenyang</value>
        </variable>
        <variable name="go.plugin.build.status.gerrit.password">
          <value>aw4t40pinExz/f/iMGEKdBGCPcTOXqI0RtGuHqOnbA</value>
        </variable>
        <variable name="go.plugin.build.status.gerrit.endpoint">
          <value>http://121.42.193.129:8080</value>
        </variable>
      </environmentvariables>
      <materials>
        <scm ref="84124bda-6568-48ee-8407-1b55a82bdc7b" dest="gerrit-pr-dirctory" />
      </materials>
      <stage name="defaultStage">
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>echo $SHELL $GO_PIPELINE_LABEL</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="cd-metrics-PR" template="cd-cdmtrics-template">
      <materials>
        <scm ref="e147ceb4-1ffc-4c02-8234-4c84cef5b11e" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="GoCD">
    <pipeline name="gocd-root" isLocked="false">
      <materials>
        <git url="git@github.com:twconsultants/leanswdev.git" />
      </materials>
      <stage name="package">
        <jobs>
          <job name="package_container">
            <tasks>
              <exec command="/bin/sh" workingdir="gocd">
                <arg>./lean</arg>
                <arg>container</arg>
              </exec>
            </tasks>
            <resources>
              <resource>docker</resource>
            </resources>
            <artifacts>
              <artifact src="gocd/server/target/dist/go-server*.zip" dest="gocd/server/target/dist/" />
              <artifact src="gocd/target/agent-bootstrapper/dist/go-agent*.zip" dest="gocd/target/agent-bootstrapper/dist/" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="acceptence">
        <jobs>
          <job name="prepare_test_env">
            <tasks>
              <exec command="docker-compose" workingdir="gocd/docker/compose">
                <arg>kill</arg>
                <runif status="passed" />
              </exec>
              <exec command="docker-compose" workingdir="gocd/docker/compose">
                <arg>up</arg>
                <arg>-d</arg>
                <runif status="passed" />
              </exec>
              <exec command="docker-compose" workingdir="gocd/docker/compose">
                <arg>restart</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>docker</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="Leansw-Services">
    <pipeline name="cd-metrics" template="cd-cdmtrics-template">
      <materials>
        <git url="git@github.com:twconsultants/leansw-cdmetrics.git" materialName="cd-metrics" />
      </materials>
    </pipeline>
    <pipeline name="cd-metrics-ui">
      <environmentvariables>
        <variable name="DEPLOY_DEST">
          <value>/var/www/cd-metrics/web/</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git@github.com:twconsultants/leansw-cdmetrics-ui.git" />
      </materials>
      <stage name="package">
        <jobs>
          <job name="package_jar">
            <tasks>
              <exec command="/bin/sh">
                <arg>./build.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/sh">
                <arg>./buildDocker.sh</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>docker</resource>
            </resources>
            <artifacts>
              <artifact src="cd-metrics-ui.jar" dest="target/cd-metrics-ui.jar" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="uat">
        <jobs>
          <job name="deploy">
            <tasks>
              <exec command="docker-compose">
                <arg>up</arg>
                <arg>-d</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>host</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="config-server">
      <materials>
        <git url="git@github.com:twconsultants/leansw-config-service.git" />
      </materials>
      <stage name="package">
        <jobs>
          <job name="package_jar">
            <tasks>
              <exec command="mvn" workingdir="config-service">
                <arg>clean</arg>
                <arg>package</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>maven</resource>
            </resources>
            <artifacts>
              <artifact src="config-service/target/config-service-1.0-SNAPSHOT.jar" dest="target/config-service.jar" />
            </artifacts>
          </job>
          <job name="package_docker">
            <tasks>
              <exec command="mvn" workingdir="config-service">
                <arg>clean</arg>
                <arg>package</arg>
                <arg>-Pdocker</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>docker</resource>
            </resources>
          </job>
        </jobs>
      </stage>
      <stage name="uat">
        <jobs>
          <job name="run_compose">
            <tasks>
              <exec command="docker-compose" workingdir="config-service">
                <arg>up</arg>
                <arg>-d</arg>
              </exec>
            </tasks>
            <resources>
              <resource>docker</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="discovery-server">
      <materials>
        <git url="git@github.com:twconsultants/leansw-config-service.git" />
      </materials>
      <stage name="package">
        <jobs>
          <job name="package_jar">
            <tasks>
              <exec command="mvn" workingdir="discovery-service">
                <arg>clean</arg>
                <arg>package</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>maven</resource>
            </resources>
            <artifacts>
              <artifact src="discovery-service/target/discovery-service-1.0-SNAPSHOT.jar" dest="target/discovery-service.jar" />
            </artifacts>
          </job>
          <job name="package_container">
            <tasks>
              <exec command="mvn" workingdir="discovery-service">
                <arg>clean</arg>
                <arg>package</arg>
                <arg>-Pdocker</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>docker</resource>
            </resources>
          </job>
        </jobs>
      </stage>
      <stage name="uat">
        <jobs>
          <job name="run_container">
            <tasks>
              <exec command="docker-compose" workingdir="discovery-service">
                <arg>up</arg>
                <arg>-d</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>docker</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="identity-server">
      <materials>
        <git url="git@github.com:twconsultants/leansw-identity.git" />
      </materials>
      <stage name="build">
        <jobs>
          <job name="package_docker">
            <tasks>
              <exec command="mvn">
                <arg>clean</arg>
                <arg>package</arg>
                <arg>-Pdocker</arg>
              </exec>
            </tasks>
            <resources>
              <resource>docker</resource>
            </resources>
          </job>
        </jobs>
      </stage>
      <stage name="uat">
        <jobs>
          <job name="run_compose">
            <tasks>
              <exec command="docker-compose">
                <arg>up</arg>
                <arg>-d</arg>
              </exec>
            </tasks>
            <resources>
              <resource>docker</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="Documentaton">
    <pipeline name="Online-help">
      <materials>
        <git url="git@github.com:twconsultants/leansw-doc.git" />
      </materials>
      <stage name="prepare_gitbook_env">
        <jobs>
          <job name="update_npm_package">
            <tasks>
              <exec command="/bin/sh">
                <arg>prepare.sh</arg>
                <arg>prepare</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>doc_host</resource>
            </resources>
          </job>
        </jobs>
      </stage>
      <stage name="generate_static_site">
        <jobs>
          <job name="generate_doc">
            <tasks>
              <exec command="/bin/sh">
                <arg>prepare.sh</arg>
                <arg>site</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>doc_host</resource>
            </resources>
          </job>
        </jobs>
      </stage>
      <stage name="publish_doc_site">
        <jobs>
          <job name="publish_user">
            <tasks>
              <exec command="/bin/sh">
                <arg>./publish-ci.sh</arg>
                <arg>/var/www/html</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>doc_host</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <templates>
    <pipeline name="gocd-module-build-pipline">
      <stage name="code_analysis">
        <jobs>
          <job name="unit-test">
            <tasks>
              <exec command="mvn" workingdir="gocd/config/config-server">
                <arg>clean</arg>
                <arg>test</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <test src="gocd/config/config-server/target" />
            </artifacts>
          </job>
          <job name="sonar-analysis">
            <tasks>
              <exec command="echo">
                <arg>sonar:sonar</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="cd-cdmtrics-template">
      <stage name="commit">
        <jobs>
          <job name="package_container">
            <tasks>
              <exec command="mvn">
                <arg>clean</arg>
                <arg>package</arg>
                <arg>-Pdocker</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>docker</resource>
            </resources>
          </job>
        </jobs>
      </stage>
      <stage name="uat">
        <jobs>
          <job name="run_compose">
            <tasks>
              <exec command="docker-compose">
                <arg>up</arg>
                <arg>-d</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>docker</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </templates>
  <agents>
    <agent hostname="iZ28ckn324vZ" ipaddress="10.174.208.186" uuid="5a5e5a4f-151d-4532-b258-6ee08581e262">
      <resources>
        <resource>doc_host</resource>
        <resource>docker</resource>
        <resource>host</resource>
      </resources>
    </agent>
    <agent hostname="a9055dc71e46" ipaddress="192.168.42.73" uuid="bf8f6b2f-7cf3-4da4-b942-bcdd4bc55080">
      <resources>
        <resource>java7</resource>
        <resource>linux</resource>
        <resource>maven</resource>
      </resources>
    </agent>
    <agent hostname="8a20e62408c6" ipaddress="192.168.42.74" uuid="eb11789f-0166-4e10-a60d-9b2c0e2f74b3">
      <resources>
        <resource>java7</resource>
        <resource>linux</resource>
        <resource>maven</resource>
      </resources>
    </agent>
  </agents>
</cruise>

